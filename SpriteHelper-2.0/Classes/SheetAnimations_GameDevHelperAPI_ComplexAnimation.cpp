//
//  SheetAnimations_GameDevHelperAPI_ComplexAnimation.cpp
//  SpriteHelper2-TestCases
//
//  Created by Bogdan Vladu on 5/22/13.
//
//

#include "SheetAnimations_GameDevHelperAPI_ComplexAnimation.h"
#include "HelloWorldScene.h"

using namespace cocos2d;

SheetAnimations_GameDevHelperAPI_ComplexAnimation::~SheetAnimations_GameDevHelperAPI_ComplexAnimation()
{
	// cpp don't need to call super dealloc
	// virtual destructor will do this
}

SheetAnimations_GameDevHelperAPI_ComplexAnimation::SheetAnimations_GameDevHelperAPI_ComplexAnimation()
{
}

CCScene* SheetAnimations_GameDevHelperAPI_ComplexAnimation::scene()
{
	CCScene * scene = NULL;
	do
	{
		// 'scene' is an autorelease object
		scene = CCScene::create();
		CC_BREAK_IF(! scene);
        
		// 'layer' is an autorelease object
		SheetAnimations_GameDevHelperAPI_ComplexAnimation *layer = SheetAnimations_GameDevHelperAPI_ComplexAnimation::create();
		CC_BREAK_IF(! layer);
        
		// add layer as a child to scene
		scene->addChild(layer);
	} while (0);
    
	// return the scene
	return scene;
}

std::string SheetAnimations_GameDevHelperAPI_ComplexAnimation::initTest()
{
    
    CCSize s = CCDirector::sharedDirector()->getWinSize();
    
#if 1
    // Use batch node. Faster
    //when using batches - load a batch node using the generated image
    batchNodeParent = CCSpriteBatchNode::create("spriteSheetAnimationsTest_Numbers.png", 100);
    this->addChild(batchNodeParent, 0);
#endif
    CCSpriteFrameCache::sharedSpriteFrameCache()->removeUnusedSpriteFrames();
    
    //load into the sprite frame cache the plist generated by SH
    CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("spriteSheetAnimationsTest_Numbers.plist");
    
    
    //using the GameDevHelper API animation cache - this will create GHAnimation objects - which are more complex then cocos2dx animations
    GHAnimationCache *cache = GHAnimationCache::sharedAnimationCache();
    cache->addAnimationsWithFile("spriteSheetAnimationsTest_SheetAnimations.plist");//the animation exported plist file
    
    this->executeTestCodeAtPosition(ccp(s.width/2, s.height/2));
    
    return "GameDevHelperAPI animations.\nDemonstrate notifications.\nWatch the console...";
}

void SheetAnimations_GameDevHelperAPI_ComplexAnimation::executeTestCodeAtPosition(CCPoint p)
{

    GHSprite * sprite = GHSprite::createWithSpriteFrameName("number_0.png");//the name of one of the sprite in the sheet plist
    
    if(batchNodeParent != NULL){//if we use batch nodes we must add the sprite to its batch parent
        batchNodeParent->addChild(sprite);
    }
    else{//if we dont use batch nodes then we must add the sprite to a normal node - e.g the layer or another node
        this->addChild(sprite);
    }
    sprite->setPosition(p);
    
    
    GHAnimationCache *cache = GHAnimationCache::sharedAnimationCache();
    GHAnimation *animation = cache->animationByName("NumbersAnim");//the name of the animation
    
    sprite->prepareAnimation(animation);
    sprite->playAnimation();
    
    sprite->setAnimationDelegate(this);
    
}

void SheetAnimations_GameDevHelperAPI_ComplexAnimation::animationDidFinishPlayingOnSprite(GHAnimation* anim,
                                                                                          GHSprite* sprite){
    
    CCLog("Animation %s DID FINISH playing on sprite %s", anim->getName().c_str(), sprite->getSpriteFrameName().c_str());
}
void SheetAnimations_GameDevHelperAPI_ComplexAnimation::animationDidChangeFrameIdxOnSprite(GHAnimation* anim,
                                                                                           int frmIdx,
                                                                                           GHSprite* sprite){

    CCLog("Animation %s DID CHANGE FRAME %d on sprite %s", anim->getName().c_str(), frmIdx, sprite->getSpriteFrameName().c_str());
    
    GHAnimationFrame* frame = anim->getCurrentFrame();
    CCDictionary* userInfo = frame->getUserInfo();
    if(userInfo){
        CCLog("THIS FRAME HAS USER INFO");
        
        CCArray* keys = userInfo->allKeys();
        
        
        CCObject* pObj = NULL;
        CCARRAY_FOREACH(keys, pObj)
        {
            CCString* key = (CCString*)pObj;
            
            CCString* object = (CCString*)userInfo->objectForKey(key->getCString());
            
            CCLog("NAME: \"%s\" VALUE: \"%s\"", object->getCString(), key->getCString());
        }
    }
    
}
void SheetAnimations_GameDevHelperAPI_ComplexAnimation::animationDidFinishRepetitionOnSprite(GHAnimation* anim,
                                                                                             int repetitionNo,
                                                                                             GHSprite* sprite){
    
    CCLog("Animation %s DID FINISH REPETITION  %d on sprite %s", anim->getName().c_str(), repetitionNo, sprite->getSpriteFrameName().c_str());
    
}


