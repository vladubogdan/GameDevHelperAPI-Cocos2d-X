//
//  SheetAnimations_GameDevHelperAPI_RandomRepeatTime.cpp
//  SpriteHelper2-TestCases
//
//  Created by Bogdan Vladu on 5/22/13.
//
//

#include "SheetAnimations_GameDevHelperAPI_RandomRepeatTime.h"
#include "HelloWorldScene.h"

using namespace cocos2d;

SheetAnimations_GameDevHelperAPI_RandomRepeatTime::~SheetAnimations_GameDevHelperAPI_RandomRepeatTime()
{
	// cpp don't need to call super dealloc
	// virtual destructor will do this
}

SheetAnimations_GameDevHelperAPI_RandomRepeatTime::SheetAnimations_GameDevHelperAPI_RandomRepeatTime()
{
}

CCScene* SheetAnimations_GameDevHelperAPI_RandomRepeatTime::scene()
{
	CCScene * scene = NULL;
	do
	{
		// 'scene' is an autorelease object
		scene = CCScene::create();
		CC_BREAK_IF(! scene);
        
		// 'layer' is an autorelease object
		SheetAnimations_GameDevHelperAPI_RandomRepeatTime *layer = SheetAnimations_GameDevHelperAPI_RandomRepeatTime::create();
		CC_BREAK_IF(! layer);
        
		// add layer as a child to scene
		scene->addChild(layer);
	} while (0);
    
	// return the scene
	return scene;
}

std::string SheetAnimations_GameDevHelperAPI_RandomRepeatTime::initTest()
{
    
    CCSize s = CCDirector::sharedDirector()->getWinSize();
    
#if 1
    // Use batch node. Faster
    //when using batches - load a batch node using the generated image
    batchNodeParent = CCSpriteBatchNode::create("spriteSheetAnimationsTest_robotBlinking.png", 100);
    this->addChild(batchNodeParent, 0);
#endif
    CCSpriteFrameCache::sharedSpriteFrameCache()->removeUnusedSpriteFrames();
    
    //load into the sprite frame cache the plist generated by SH
    CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("spriteSheetAnimationsTest_robotBlinking.plist");
    
    
    //using the GameDevHelper API animation cache - this will create GHAnimation objects - which are more complex then cocos2dx animations
    GHAnimationCache *cache = GHAnimationCache::sharedAnimationCache();
    cache->addAnimationsWithFile("spriteSheetAnimationsTest_SheetAnimations.plist");//the animation exported plist file
    
    this->executeTestCodeAtPosition(ccp(s.width/2, s.height/2));
    
    return "GameDevHelperAPI animations. Demonstrate random replay time.\nThe left robot will play normally, while the right robot plays with\n a random repeat time giving a more realistic look.\nWatch console for notifications.";
}

void SheetAnimations_GameDevHelperAPI_RandomRepeatTime::executeTestCodeAtPosition(CCPoint p)
{

    {
        //loading the sprite that will run the animation with random restart time
        GHSprite * spriteRandom = GHSprite::createWithSpriteFrameName("robotEyesOpen.png");//the name of one of the sprite in the sheet plist
        
        if(batchNodeParent != NULL){//if we use batch nodes we must add the sprite to its batch parent
            batchNodeParent->addChild(spriteRandom);
        }
        else{//if we dont use batch nodes then we must add the sprite to a normal node - e.g the layer or another node
            this->addChild(spriteRandom);
        }
        spriteRandom->setPosition(ccp(p.x + 60, p.y));
        
        
        GHAnimationCache *cache = GHAnimationCache::sharedAnimationCache();
        GHAnimation *animation = cache->animationByName("blinkingAnim");//the name of the animation
        
        spriteRandom->prepareAnimation(animation);
        spriteRandom->playAnimation();
        
        spriteRandom->setAnimationDelegate(this);
    }
    
    {
        //loading the sprite that will run the animation normal
        GHSprite * sprite = GHSprite::createWithSpriteFrameName("robotEyesOpen.png");//the name of one of the sprite in the sheet plist
        
        if(batchNodeParent != NULL){//if we use batch nodes we must add the sprite to its batch parent
            batchNodeParent->addChild(sprite);
        }
        else{//if we dont use batch nodes then we must add the sprite to a normal node - e.g the layer or another node
            this->addChild(sprite);
        }
        sprite->setPosition(ccp(p.x - 60, p.y));
        
        //this is another way you can prepare an animation on a sprite
        sprite->prepareAnimationWithName("blinkingAnim");
        sprite->getAnimation()->setRandomReplay(false);//MAKE RANDOM REPLAY FALSE - as this animation has random replay set to true (check SpriteHelper document)
        sprite->playAnimation();
    }
}

void SheetAnimations_GameDevHelperAPI_RandomRepeatTime::animationDidFinishPlayingOnSprite(GHAnimation* anim,
                                                                                          GHSprite* sprite){
    
    CCLog("Animation %s DID FINISH playing on sprite %s", anim->getName().c_str(), sprite->description().c_str());
}
void SheetAnimations_GameDevHelperAPI_RandomRepeatTime::animationDidChangeFrameIdxOnSprite(GHAnimation* anim,
                                                                                           int frmIdx,
                                                                                           GHSprite* sprite){

    CCLog("Animation %s DID CHANGE FRAME %d on sprite %s", anim->getName().c_str(), frmIdx, sprite->description().c_str());
    
    GHAnimationFrame* frame = anim->getCurrentFrame();
    CCDictionary* userInfo = frame->getUserInfo();
    if(userInfo){
        CCLog("THIS FRAME HAS USER INFO");
        
        CCArray* keys = userInfo->allKeys();
        
        
        CCObject* pObj = NULL;
        CCARRAY_FOREACH(keys, pObj)
        {
            CCString* key = (CCString*)pObj;
            
            CCString* object = (CCString*)userInfo->objectForKey(key->getCString());
            
            CCLog("NAME: %s VALUE %s", object->getCString(), key->getCString());
        }
    }
    
}
void SheetAnimations_GameDevHelperAPI_RandomRepeatTime::animationDidFinishRepetitionOnSprite(GHAnimation* anim,
                                                                                             int repetitionNo,
                                                                                             GHSprite* sprite){
    
    CCLog("Animation %s DID FINISH REPETITION  %d on sprite %s", anim->getName().c_str(), repetitionNo, sprite->description().c_str());
    
}


